JavaScript中Eval()函数的作用
 


首先来个最简单的理解
eval可以将字符串生成语句执行，和SQL的exec()类似。
eval的使用场合是什么呢？有时候我们预先不知道要执行什么语句，只有当条件和参数给时才知道执行什么语句，这时候eval就派上用场了。举个例子：
我们要做一个function()，功能是输入网页中两个个对象的名称，然后程序就将这两个对象的值联接起来输出。
            function output(a,b) 
            { 
               var tmpa,tmpb; 
               tmpa=document.all.a.value; 
               tmpb=document.all.b.value; 
               document.write(tmpa+tmpb); 
            } 
            output('input1','input2');
    
这样你执行的时候就会提示错误“document.all.a不是对象”以及“document.all.b不是对象”。原来javascript把a和b当成对象名称了，怎样能让javascript把a里面的值作为对象名称呢？这时候就要用eval了，把代码改成这样：

            function output(a,b) 
            { 
            var tmpa,tmpb; 
            tmpa=eval("document.all."+a+".value"); 
            tmpb=eval("document.all."+b+".value"); 
            document.write(tmpa+tmpb); 
            } 
            output('input1','input2'); 
            这样javascript就会先取出a,b的值，然后和前面的document.all.以及后面的.value组合运行，于是就可以 
            顺利取出input1和input2的值.

看完上面的基本理解eval是什么含义了吧
然后看下面的理解
稍微晋级一点点，用到了DOM中替换图片的例子
在Javascript中Eval函数的使用？
【eval()函数】
            
JavaScript有许多小窍门来使编程更加容易。
其中之一就是eval()函数，这个函数可以把一个字符串当作一个JavaScript表达式一样去执行它。
举个小例子：
            var the_unevaled_answer = "2 + 3";
            var the_evaled_answer = eval("2 + 3");
            alert("the un-evaled answer is " + the_unevaled_answer + " and the 
            evaled answer is " + the_evaled_answer);
如果你运行这段eval程序, 你将会看到在JavaScript里字符串"2 + 3"实际上被执行了。
所以当你把the_evaled_answer的值设成 eval("2 + 3")时, 
JavaScript将会明白并把2和3的和返回给the_evaled_answer。 
这个看起来似乎有点傻，其实可以做出很有趣的事。比如使用eval你可以根据用户的输入直接创建函数。
这可以使程序根据时间或用户输入的不同而使程序本身发生变化，通过举一反三，你可以获得惊人的效果。
在实际中，eval很少被用到，但也许你见过有人使用eval来获取难以索引的对象。
文档对象模型（DOM)的问题之一是:有时你要获取你要求的对象简直就是痛苦。
例如，这里有一个函数询问用户要变换哪个图象:变换哪个图象你可以用下面这个函数：
            function swapOne()
            {
            var the_image = prompt("change parrot or cheese","");
            var the_image_object;
            if (the_image == "parrot")
            {
               the_image_object = window.document.parrot;
            } 
            else 
            {
               the_image_object = window.document.cheese;
            }
            the_image_object.src = "ant.gif";
            }
            连同这些image标记:
            [img src="/stuff3a/parrot.gif" name="parrot"]
            [img src="/stuff3a/cheese.gif" name="cheese"]
            请注意象这样的几行语句：
                  
            the_image_object = window.document.parrot;
            它把一个图象对象敷给了一个变量。虽然看起来有点儿奇怪，它在语法上却毫无问题。
            但当你有100个而不是两个图象时怎么办？你只好写上一大堆的 if-then-else语句，要是能象这样就好了：

            function swapTwo()
            {
            var the_image = prompt("change parrot or cheese","");
            window.document.the_image.src = "ant.gif";
            }
            不幸的是, JavaScript将会寻找名字叫 the_image而不是你所希望的"cheese"或者"parrot"的图象，
            于是你得到了错误信息：”没听说过一个名为the_image的对象”。
            还好，eval能够帮你得到你想要的对象。
            function simpleSwap()
            {
            var the_image = prompt("change parrot or cheese","");
            var the_image_name = "window.document." + the_image;
            var the_image_object = eval(the_image_name);
            the_image_object.src = "ant.gif";
            }

            如果用户在提示框里填入"parrot"，在第二行里创建了一个字符串即window.document.parrot. 
            然后包含了eval的第三
            行意思是： "给我对象window.document.parrot" - 也就是你要的那个图象对象。一旦你获取了这个图象对象，你可以把
            它的src属性设为ant.gif. 有点害怕？用不着。其实这相当有用，人们也经常使用它。
            我们常常在Javascript中间到Eval这个函数，
            有些人觉得这个函数很奇怪，可以把一些字符串变的功能很强大
            在我们需要将普通的字符串转变成具体的对象的时候，就会用到这个函数
            eval 函数对作为数字表达式的一个字符串进行求值，其语法为：
            eval(expr)
            此处 expr 是一个被求值的字符串参数。如果该字符串是一个表达式，eval 求该表达式的值；如果该参数代表一个或多个 
            JavaScript 语句，那么 eval 执行这些语句。eval 
函数可以用来把一个日期从一种格式（总是字符串）转换为数值表达式或数字。
            ==============================
            Eval 函数
            功能：先解释Javascript代码，然后在执行它
            用法：Eval(codeString)
            codeString是包含有Javascript语句的字符串，在eval之后使用Javascript引擎编译。
            注释：
            例子：eval(id + "_icon.src="/imgs/collapse_up.gif'");
            id是之前设定的参数，而在双引号中的字符串则是需要编译的
            引用:
            --------------------------------------------------------------------------------
            function tophide(id)     //id indicates menu
            {
                 if (top.topframeset.rows == "31,*")
                 {
                     top.topframeset.rows = "86,*";
                     eval(id + "_icon.src="/imgs/collapse_up.gif'");
                     eval(id + "_icon.alt='Collapse The Head'");
                     head.style.display = "block"
                     }
                 else
                 {
                     top.topframeset.rows = "31,*";
                     eval(id + "_icon.src="/imgs/collapse_down.gif'");
                     eval(id + "_icon.alt='Expand The Head'");
                     head.style.display = "none"
                 } 
            }
            如果还是不明白深入认识javascript中的eval函数
          

            发现为本文起一个合适的标题还不是那么容易，呵呵，所以在此先说明下本文的两个目的：
            （1）介绍javascript中的eval函数的用法
            （2）如何在函数内执行全局代码
            &#9658;先来说eval的用法，内容比较简单，熟悉的可以跳过。
            eval函数接收一个参数s，如果s不是字符串，则直接返回s。否则执行s语句。如果s语句执行结果是一个值，则返回此值，否则返回undefined。
            需要特别注意的是对象声明语法“{}”并不能返回一个值，需要用括号括起来才会返回值，简单示例如下：
            var code1='"a" + 2';    //表达式
            var code2='{a:2}';      //语句
            alert(eval(code1));     //->'a2'
            alert(eval(code2));     //->undefined
            alert(eval('(' + code2 + ')'));    //->[object Object]
            可以看到，对于对象声明语句来说，仅仅是执行，并不能返回值。为了返回常用的“{}”这样的对象声明语句，必须用括号括住，以将其转换为表达式，才能返回其值。这也是使用JSON来进行Ajax开发的基本原理之一。在例子中可以清楚的看到，第二个alert语句输出的是undefined，而第三个加了括号后输出的是语句表示的对象。
            &#9658;现在来说本文的重点，如何在函数内执行全局代码。为了说明这个问题，先看一个例子：
            var s='global';    //定义一个全局变量
            function demo1(){
                eval('var s="local"');
            }
            demo1();
            alert(s);    //->global
            很好理解，上面的demo1函数等价于：function demo1(){var s='local';}，其中定义了一个局部变量s。
            所以最后的输出是global并不是什么奇怪的事情，毕竟大家都能很清楚的区分局部变量和全局变量。
            仔细体会一下，可以发现eval函数的特点，它总是在调用它的上下文变量空间（也称为：包，closure）内执行，无论是变量定义还是函数定义都是如此，所以如下的代码会产生函数未定义的错误：
            var s='function test(){return 1;}';     //一个函数定义语句
            function demo2(){
                eval(s);
            }
            demo2();
            alert(test());    //->error:test is not defined
            这是因为test函数在局部空间定义，demo2函数内可以访问到，外面就访问不到了。

            而在实际的Ajax开发中，有时我们需要从服务器动态获取代码来执行，以减轻一次载入代码过多的问题，或者是一些代码是通过Javascript自身生成的，希望用eval函数来使其执行。
            但这样的动态获取代码的工作一般在函数内完成，比如：
            function loadCode(){
                var code=getCode();
                eval(code);
            }
            可见eval不可能在全局空间内执行，这就给开发带来了不少问题，也看到过很多人为此郁闷。
            不过现在偶终于找到了解决办法，嘿嘿，可以同时兼容IE和Firefox，方法如下：
            var X2={}    //my namespace:)
            X2.Eval=function(code){
            if(!!(window.attachEvent && !window.opera)){
              //ie
              execScript(code); 
            }else{
              //not ie
              window.eval(code);
            }
            }
            现在如果要想在函数内定义全局代码，就可以通过调用X2.Eval(code)方法，一个例子如下：
            var s='global';
            function demo3(){
            X2.Eval('var s="local"');
            }
            demo3();
            alert(s); //->'local'
            可见，在demo3函数内重新定义了全局变量s="local"。
            需要注意的是X2.Eval并不返回值，如果要进行表达式的求值，还是用系统的eval函数。X2.Eval设计为仅做全局代码定义用。
            其实看到这里，或许有人感觉问题也太容易解决了点，呵呵，但发现这个办法倒是需要些运气和技巧的：
            （1）对于IE浏览器，默认已经提供了这样的函数：execScript，用于在全局空间执行代码，只是知道的人还不多。
            （2）对于Firefox浏览器，直接调用eval函数，则在调用者的空间执行；如果调用window.eval则在全局空间执行。这个知道的人估计就更少了。毕竟alert(eval==window.eval)返回true！
            Firefox的eval函数的特点的确是很令人奇怪的，但从javascript规范中倒也能找到其来源：
            If value of the eval property is used in any way other than a direct 
            call (that is, other than by the explicit use of its
            name as an Identifier which is the MemberExpression in a 
            CallExpression), or if the eval property is assigned to,
            an EvalError exception may be thrown.
            意思大概就是说eval函数的执行是和调用者相关的，但并没有说其执行上下文的问题。所以IE和Firefox孰是孰非也就很难说了，大家知道解决办法就好

